package com.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.rt.sm.bean.MemberBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEMBER_BEAN".
*/
public class MemberBeanDao extends AbstractDao<MemberBean, Long> {

    public static final String TABLENAME = "MEMBER_BEAN";

    /**
     * Properties of entity MemberBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Avatar = new Property(1, String.class, "avatar", false, "AVATAR");
        public final static Property Birthday = new Property(2, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Bodyheight = new Property(3, String.class, "bodyheight", false, "BODYHEIGHT");
        public final static Property Mode = new Property(4, String.class, "mode", false, "MODE");
        public final static Property Session_token = new Property(5, String.class, "session_token", false, "SESSION_TOKEN");
        public final static Property Logintime = new Property(6, String.class, "logintime", false, "LOGINTIME");
        public final static Property Phone = new Property(7, String.class, "phone", false, "PHONE");
        public final static Property Sex = new Property(8, int.class, "sex", false, "SEX");
        public final static Property Bodyweight = new Property(9, String.class, "bodyweight", false, "BODYWEIGHT");
        public final static Property Username = new Property(10, String.class, "username", false, "USERNAME");
        public final static Property Useracc = new Property(11, String.class, "useracc", false, "USERACC");
        public final static Property Bodyblood = new Property(12, String.class, "bodyblood", false, "BODYBLOOD");
        public final static Property Email = new Property(13, String.class, "email", false, "EMAIL");
        public final static Property NowLogin = new Property(14, int.class, "nowLogin", false, "NOW_LOGIN");
    }


    public MemberBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MemberBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEMBER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"AVATAR\" TEXT," + // 1: avatar
                "\"BIRTHDAY\" TEXT," + // 2: birthday
                "\"BODYHEIGHT\" TEXT," + // 3: bodyheight
                "\"MODE\" TEXT," + // 4: mode
                "\"SESSION_TOKEN\" TEXT," + // 5: session_token
                "\"LOGINTIME\" TEXT," + // 6: logintime
                "\"PHONE\" TEXT UNIQUE ," + // 7: phone
                "\"SEX\" INTEGER NOT NULL ," + // 8: sex
                "\"BODYWEIGHT\" TEXT," + // 9: bodyweight
                "\"USERNAME\" TEXT," + // 10: username
                "\"USERACC\" TEXT," + // 11: useracc
                "\"BODYBLOOD\" TEXT," + // 12: bodyblood
                "\"EMAIL\" TEXT," + // 13: email
                "\"NOW_LOGIN\" INTEGER NOT NULL );"); // 14: nowLogin
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEMBER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MemberBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(2, avatar);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(3, birthday);
        }
 
        String bodyheight = entity.getBodyheight();
        if (bodyheight != null) {
            stmt.bindString(4, bodyheight);
        }
 
        String mode = entity.getMode();
        if (mode != null) {
            stmt.bindString(5, mode);
        }
 
        String session_token = entity.getSession_token();
        if (session_token != null) {
            stmt.bindString(6, session_token);
        }
 
        String logintime = entity.getLogintime();
        if (logintime != null) {
            stmt.bindString(7, logintime);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
        stmt.bindLong(9, entity.getSex());
 
        String bodyweight = entity.getBodyweight();
        if (bodyweight != null) {
            stmt.bindString(10, bodyweight);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(11, username);
        }
 
        String useracc = entity.getUseracc();
        if (useracc != null) {
            stmt.bindString(12, useracc);
        }
 
        String bodyblood = entity.getBodyblood();
        if (bodyblood != null) {
            stmt.bindString(13, bodyblood);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(14, email);
        }
        stmt.bindLong(15, entity.getNowLogin());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MemberBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(2, avatar);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(3, birthday);
        }
 
        String bodyheight = entity.getBodyheight();
        if (bodyheight != null) {
            stmt.bindString(4, bodyheight);
        }
 
        String mode = entity.getMode();
        if (mode != null) {
            stmt.bindString(5, mode);
        }
 
        String session_token = entity.getSession_token();
        if (session_token != null) {
            stmt.bindString(6, session_token);
        }
 
        String logintime = entity.getLogintime();
        if (logintime != null) {
            stmt.bindString(7, logintime);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
        stmt.bindLong(9, entity.getSex());
 
        String bodyweight = entity.getBodyweight();
        if (bodyweight != null) {
            stmt.bindString(10, bodyweight);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(11, username);
        }
 
        String useracc = entity.getUseracc();
        if (useracc != null) {
            stmt.bindString(12, useracc);
        }
 
        String bodyblood = entity.getBodyblood();
        if (bodyblood != null) {
            stmt.bindString(13, bodyblood);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(14, email);
        }
        stmt.bindLong(15, entity.getNowLogin());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public MemberBean readEntity(Cursor cursor, int offset) {
        MemberBean entity = new MemberBean( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // avatar
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // birthday
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bodyheight
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // session_token
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // logintime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // phone
            cursor.getInt(offset + 8), // sex
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // bodyweight
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // username
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // useracc
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // bodyblood
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // email
            cursor.getInt(offset + 14) // nowLogin
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MemberBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setAvatar(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBirthday(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBodyheight(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSession_token(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLogintime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSex(cursor.getInt(offset + 8));
        entity.setBodyweight(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUsername(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUseracc(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBodyblood(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setEmail(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setNowLogin(cursor.getInt(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MemberBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MemberBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MemberBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
